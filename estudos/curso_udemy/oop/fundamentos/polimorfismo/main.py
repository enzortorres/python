"""
    | Polimorfismo - Python Orientado a Objetos
    ? Polimorfismo √© o princ√≠pio que permite que classes derivadas (que herdam de uma superclasse) de uma mesma superclasse tenham m√©todos iguais (com mesma assinatura) mas comportamentos diferentes.
    ? Assinatura do m√©todo = mesmo nome e quantidade de par√¢metros (retorno que n√£o faz parte da assinatura).
    
    : Opni√£o + princ√≠pios que contam:
        > Assinatura do m√©todo: nome, par√¢metros e retornos iguais
        > SO"L"ID
        > Princ√≠pio da substitui√ß√£o de liskov
    
    ? Objetos de uma superclasse devem ser substitu√≠veis por objetos de uma subclasse sem quebrar a aplica√ß√£o.
    ? Sobrecarga de m√©todos (overload) üêç = ‚ùå
    ? Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
"""
from abc import ABC, abstractmethod

class Notificacao(ABC):
    def __init__(self, mensagem):
        self.mensagem = mensagem
    
    @abstractmethod
    def enviar(self) -> bool: # ? typehinting ( -> bool), serve para indicar para os devs oque esse m√©todo deve retornar
        ...
        
class NotificacaoViaEmail(Notificacao):
    def enviar(self) -> bool: 
        print('Enviado pelo email:', self.mensagem)
        return True

class NotificacaoViaSMS(Notificacao):
    def enviar(self) -> bool: 
        print('Enviado pelo SMS:', self.mensagem)
        return False

def notificar(notificacao: Notificacao):
    notificacao_enviada = notificacao.enviar()
    
    if notificacao_enviada:
        print('Notifica√ß√£o enviada.')
    else:
        print('Notifica√ß√£o N√ÉO enviada.')

notificacao_email = NotificacaoViaEmail('Testando e-mail')
notificar(notificacao_email)

print()

notificacao_sms = NotificacaoViaSMS('Testando SMS')
notificar(notificacao_sms)